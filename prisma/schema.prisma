
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

/* Product and Categories */
model Product {
  id               Int     @id @default(autoincrement())
  wpId             Int     @unique
  name             String
  slug             String  @unique
  hash             String
  permalink        String
  dateCreated      DateTime
  dateModified     DateTime
  type             String
  status           String
  featured         Boolean
  catalogVisibility String
  description      String?
  shortDescription String?
  sku             String?
  price           Float
  regularPrice    String?
  salePrice       String?
  onSale          Boolean
  purchasable     Boolean
  totalSales      Int?
  manageStock     Boolean
  stockQuantity   Int?
  weight          String?
  dimensions      Json?
  shippingRequired Boolean
  shippingTaxable Boolean
  reviewsAllowed  Boolean
  averageRating   Float
  ratingCount     Int
	relatedIds			Json?
  categories      Json?
  tags            Json?
  images          Json?
  attributes      Json?
  variations      Json?
  metaData        Json?
  stockStatus     String
  brands          Json?
	inCart					Boolean @default(false)

  Variation Variation[]
	favorites  Favorite[]
}

model Variation { 
 	id               Int     @id @default(autoincrement())
	wpId             Int     @unique
	productId				 Int
	name             String
  hash             String
  permalink        String
  dateCreated      DateTime
  dateModified     DateTime
  status           String
  description      String?
  shortDescription String?
	sku             String?
  price           Float
  regularPrice    String?
  salePrice       String?
	image       		Json?
	attributes			Json?

	product      Product    @relation(fields: [productId], references: [id], onDelete: Cascade)
	favorites  Favorite[]
}	

model Category {
  id          Int     @id @default(autoincrement())
  wpId        Int     @unique
  name        String
  slug        String  @unique
	hash     		String @default("")
  parent      Int?
  description String?
  display     String
  image       Json?
  menuOrder   Int
  count       Int
  featured    Boolean
}

/* Cart Logic */
model Cart {
  id          Int      @id @default(autoincrement())
  userId  String?  @unique
  user    User? @relation(fields: [userId], references: [id], onDelete: Cascade) 
  sessionToken String? @unique  // ✅ Add session token for guest carts
  items       CartItem[]
}

model CartItem {
  id        Int     @id @default(autoincrement())
  cartId    Int
  cart      Cart    @relation(fields: [cartId], references: [id], onDelete: Cascade)
  productId Int
	variationId Int
  quantity  Int
  price     Float
}


/* User / User Logic */
model User {
  id              String   @id @default(cuid())
	email           String  @unique
	username        String  @unique
	passwordHash    String
	
  firstName       String?
  lastName        String?
  role            String
  
  billing         Json?
  shipping        Json?
  isPayingUser 		Boolean?
  avatarUrl       String?
  hash            String?

  dateCreated     DateTime
  dateModified    DateTime?

  sessions        Session[]
  cart	          Cart? // ✅ Relation to Cart (each user can have one cart)
	favorites				Favorite[]
}

model Session {
  id          String   @id                          // this is the token
  userId      String
  user        User     @relation(fields: [userId], references: [id])
  expiresAt   DateTime
}

model AppSession {
  id        String   @id
  userId    String?
  createdAt DateTime @default(now())
  expiresAt DateTime
}

model Visitor {
  id          Int      @id @default(autoincrement())
  ip          String   @unique
  userAgent   String
  referrer    String?
  timestamp   DateTime
  visitCount  Int      @default(1)

  pages       PageVisit[]
}

model PageVisit {
  id         Int      @id @default(autoincrement())
  url        String
  visitorId  Int
  ip         String
  referrer   String
  timestamp  DateTime
  visitCount Int      @default(1)

  visitor    Visitor  @relation(fields: [visitorId], references: [id], onDelete: Cascade)

  @@unique([url, visitorId]) // ✅ Make (url, visitorId) unique
}

/* Favorites */
model Favorite {
  id        Int     @id @default(autoincrement())
  userId    String?  
	sessionToken String?  
  productId Int
	variationId Int?
  createdAt DateTime @default(now())

  user     User?    @relation(fields: [userId], references: [id])
  product  Product? @relation(fields: [productId], references: [id])
	variation  Variation? @relation(fields: [variationId], references: [id])

  @@unique([userId, productId, variationId]) // no duplicate favorites per user
}
